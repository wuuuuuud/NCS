// Generated by CoffeeScript 1.6.3
var activatedComments, activeForm, addClassEntryRoutine, classSequence, editInitialize, formInitialize, fullScreenBlock, fullScreenUnblock, generateNavigator, listInfo, listInitialize, logging, loginRoutine, logs, pageInitialize, rearrangeCommentBoxes, refreshRoutine, registerRoutine, states, switchFormTo, uploadPartRoutine, userInitialize,
  _this = this;

logs = '';

activeForm = null;

listInfo = {};

states = {};

activatedComments = [];

classSequence = ['root', 'book', 'series', 'volume', 'part', 'chapter', 'node', 'paragraph'];

generateNavigator = function() {};

loginRoutine = function() {};

pageInitialize = function() {
  logging('pageInitialize\r\n');
  if ($('#listWrapper').length > 0) {
    $("#toolButtonWrapper > .btn").css("display", "none");
    $(refreshButton).css("display", "block");
    listInitialize($.parseJSON(data.innerHTML));
    $("#listWrapper").delegate(".name", "click", function(event) {
      var ajaxRequest;
      if (listInfo.className === "chapter") {
        return window.open('/paragraph/?parentKey=' + this.parentNode.id, "_self", "");
      }
      fullScreenBlock("加载中...");
      return ajaxRequest = $.ajax({
        "url": "/get/class",
        "method": "POST",
        "data": "key=" + this.parentNode.id
      }).done(function(returnData) {
        listInitialize($.parseJSON(returnData));
        return data.innerHTML = returnData;
      }).fail(function() {
        return alert("failed");
      }).always(function() {
        return fullScreenUnblock();
      });
    });
    $("#classReturnButton").bind("click", function(event) {
      var ajaxRequest, listData;
      fullScreenBlock("加载中...");
      listData = $.parseJSON(data.innerHTML);
      return ajaxRequest = $.ajax({
        "url": "/get/class",
        "method": "POST",
        "data": "key=" + (listData.className === "book" ? "" : listData.self.parentKey)
      }).done(function(returnData) {
        listInitialize($.parseJSON(returnData));
        return data.innerHTML = returnData;
      }).fail(function() {
        return alert("failed");
      }).always(function() {
        return fullScreenUnblock();
      });
    });
    return $("#uploadPartButton").bind("click", function(event) {
      $(fullScreenWrapper).css("visibility", "visible");
      return switchFormTo(uploadPartForm);
    });
  } else if ($("#content").length > 0) {
    listInfo = $.parseJSON(listData.innerHTML);
    $("#toolButtonWrapper > .btn").css("display", "none");
    $(scrollUpButton).css("display", "block");
    $(editParagraphButton).css("display", "block");
    $(toggleAllCommentButton).css("display", "block");
    $(classReturnButton).css("display", "block");
    if (listInfo.next !== '') {
      $(nextButton).css('display', "inline");
      $(nextButton).bind("click", function() {
        return window.open("/paragraph?parentKey=" + listInfo.next, "_self", "");
      });
    }
    if (listInfo.previous !== '') {
      $(previousButton).css('display', "inline");
      $(previousButton).bind("click", function() {
        return window.open("/paragraph?parentKey=" + listInfo.previous, "_self", "");
      });
    }
    $(toggleAllCommentButton).bind("click", function() {
      activatedComments = [];
      commentList.forEach(function(value) {
        hideComment(value);
        if (value["commentBox"] !== void 0 && value["commentBox"] !== null) {
          value["commentBox"].remove();
        }
        return showComment(value);
      });
      rearrangeCommentBoxes(activatedComments);
      return rearrangeCommentBoxes(activatedComments);
    });
    $(editParagraphButton).bind("click", function() {
      if (states['editMode'] === true) {
        states['editMode'] = false;
        $("#content").undelegate("p", "click");
        return editParagraphButton.innerHTML = 'EDIT PARAGRAPH';
      } else {
        states['editMode'] = true;
        editParagraphButton.innerHTML = 'EXIT EDIT PARAGRAPH';
        return $("#content").delegate("p", "click", function(event) {
          $(UpdateParagraphDiv).css('visibility', 'visible');
          $(UpdateParagraphDiv).css('top', 200 + window.scrollY + 'px');
          UpdateParagraphForm.key.value = this.id;
          return UpdateParagraphForm.content.value = this.innerHTML;
        });
      }
    });
    return $(classReturnButton).bind("click", function() {
      return window.open("/page?key=" + listInfo.parentKey, "_self", "");
    });
  }
};

listInitialize = function(listData) {
  var div, value, _i, _len, _ref;
  listInfo = listData;
  logging('listInitialize\r\n');
  $('#listWrapper > .class-entry').remove();
  _ref = listData.data;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    value = _ref[_i];
    div = $("#listEntryPrototype").clone(true);
    div.css("display", "block");
    div.css("visibility", "visible");
    div[0].id = value.key;
    div[0].innerHTML = '<span class="name">' + value.name + '</span>';
    div.appendTo($("#listWrapper")[0]);
  }
  if (listData.self != null) {
    $(classReturnButton).css("display", "block");
  } else {
    $(classReturnButton).css("display", "none");
  }
  addClassEntryForm.className.value = classSequence[classSequence.indexOf(listInfo.className) + 1];
  addClassEntryForm.parentKey.value = listData.self != null ? listData.self.key : '';
  uploadPartForm.parentKey.value = (listData.self != null) && listInfo.className === "part" ? listData.self.key : '';
  navigateBar.innerHTML = listInfo.className + " " + (listInfo.self != null ? listInfo.self.name : '');
  return $(uploadPartButton).css("display", listInfo.className === "part" ? "block" : "none");
};

userInitialize = function() {
  $(loginText).bind("click", function() {
    $(fullScreenWrapper).css("visibility", "visible");
    return switchFormTo(loginForm);
  });
  $(registerText).bind("click", function() {
    $(fullScreenWrapper).css("visibility", "visible");
    return switchFormTo(registerForm);
  });
  return $(logoutText).bind("click", function() {
    fullScreenBlock("登出中...");
    return $.ajax({
      "url": "/logout/user",
      "method": "GET",
      "data": ""
    }).done(function(returnData) {
      var userInfo;
      userInfo = $.parseJSON(returnData);
      if (userInfo.success) {
        $(loggedText).css("display", "none");
        return $(notLoggedText).css("display", "inline");
      }
    }).fail(function() {
      return alert("failed");
    }).always(function() {
      return fullScreenUnblock();
    });
  });
};

switchFormTo = function(formId) {
  $("#submitForm form").css("display", "none");
  $(formId).css("display", "block");
  return activeForm = formId;
};

formInitialize = function() {
  return $(submitButton).bind("click", function() {
    if (activeForm === loginForm) {
      return loginRoutine();
    } else if (activeForm === registerForm) {
      return registerRoutine();
    } else if (activeForm === addClassEntryForm) {
      return addClassEntryRoutine();
    } else if (activeForm === uploadPartForm) {
      return uploadPartRoutine();
    }
  });
};

loginRoutine = function() {
  fullScreenBlock("登陆中...");
  return $.ajax({
    "url": "/login/user/",
    "method": "POST",
    "data": $(loginForm).serialize()
  }).done(function(returnData) {
    var userInfo;
    userInfo = $.parseJSON(returnData);
    if (userInfo.success) {
      $(loggedText).css("display", "inline");
      $(notLoggedText).css("display", "none");
      userNameText.innerHTML = userInfo.username;
      if (typeof AddComment !== "undefined" && AddComment !== null) {
        AddComment.user.value = userInfo.key;
      }
      return $(fullScreenWrapper).css("visibility", "hidden");
    } else {
      return alert("大概哪里出错了...");
    }
  }).fail(function() {
    return alert("failed");
  }).always(function() {
    return fullScreenUnblock();
  });
};

registerRoutine = function() {
  if (registerForm.password.value !== registerForm.passwordCheck.value) {
    return alert("呃,两次密码输入不同。");
  }
  fullScreenBlock("注册中...");
  return $.ajax({
    "url": "/register/user/",
    "method": "POST",
    "data": $(registerForm).serialize()
  }).done(function(returnData) {
    var userInfo;
    userInfo = $.parseJSON(returnData);
    if (userInfo.success) {
      $(loggedText).css("display", "inline");
      $(notLoggedText).css("display", "none");
      userNameText.innerHTML = userInfo.username;
      return $(fullScreenWrapper).css("visibility", "hidden");
    } else {
      return alert("大概哪里出错了...");
    }
  }).fail(function() {
    return alert("failed");
  }).always(function() {
    return fullScreenUnblock();
  });
};

editInitialize = function() {
  $(classEntryAddButton).bind("click", function() {
    $(fullScreenWrapper).css("visibility", "visible");
    return switchFormTo(addClassEntryForm);
  });
  $(refreshButton).bind("click", function() {
    return refreshRoutine();
  });
  return $(toggleAllCommentButton).bind("click", function() {});
};

addClassEntryRoutine = function() {
  fullScreenBlock("添加中...");
  return $.ajax({
    "url": "/add/class/",
    "method": "POST",
    "data": $(addClassEntryForm).serialize()
  }).done(function(returnData) {
    var classInfo;
    classInfo = $.parseJSON(returnData);
    if (classInfo.success) {
      listInfo.data.push(classInfo.self);
      listInitialize(listInfo);
      return $(fullScreenWrapper).css("visibility", "hidden");
    } else {
      return alert("大概哪里出错了...");
    }
  }).fail(function() {
    return alert("failed");
  }).always(function() {
    return fullScreenUnblock();
  });
};

uploadPartRoutine = function() {
  fullScreenBlock("上传中...");
  return $.ajax({
    "url": "/upload/part/",
    "method": "POST",
    "data": $(uploadPartForm).serialize()
  }).done(function(returnData) {
    return alert("似乎成功了...");
  }).fail(function() {
    return alert("failed");
  }).always(function() {
    return fullScreenUnblock();
  });
};

refreshRoutine = function() {
  var ajaxRequest;
  fullScreenBlock("刷新中...");
  return ajaxRequest = $.ajax({
    "url": "/get/class",
    "method": "POST",
    "data": "key=" + (listInfo.className === "root" ? "" : listInfo.self.key)
  }).done(function(returnData) {
    listInitialize($.parseJSON(returnData));
    return data.innerHTML = returnData;
  }).fail(function() {
    return alert("failed");
  }).always(function() {
    return fullScreenUnblock();
  });
};

logging = function(text) {
  return logs += text;
};

fullScreenBlock = function(indicatingText) {
  $(fullScreenBlocker).css("visibility", "visible");
  return fullScreenIndicator.innerHTML = indicatingText;
};

fullScreenUnblock = function() {
  return $(fullScreenBlocker).css("visibility", "hidden");
};

rearrangeCommentBoxes = function(_activatedComments) {
  var currentTop, plannedTop, sortedCommentList, wrapperOffset, _comment, _i, _j, _k, _l, _len, _len1, _len2, _len3, _results;
  for (_i = 0, _len = _activatedComments.length; _i < _len; _i++) {
    _comment = _activatedComments[_i];
    _comment['commentBoxHeight'] = INT(window.getComputedStyle(_comment['commentBox']).height);
  }
  for (_j = 0, _len1 = _activatedComments.length; _j < _len1; _j++) {
    _comment = _activatedComments[_j];
    _comment['commentHighlighterTop'] = INT(window.getComputedStyle(_comment['beginning']).top);
  }
  for (_k = 0, _len2 = _activatedComments.length; _k < _len2; _k++) {
    _comment = _activatedComments[_k];
    _comment['commentHighlighterLeft'] = INT(window.getComputedStyle(_comment['beginning']).left);
  }
  sortedCommentList = _activatedComments;
  sortedCommentList = sortedCommentList.sort(function(a, b) {
    if (a['commentHighlighterTop'] < b['commentHighlighterTop']) {
      return -1;
    } else if (a['commentHighlighterTop'] === b['commentHighlighterTop']) {
      if (a['commentHighlighterLeft'] < b['commentHighlighterLeft']) {
        return -1;
      } else {
        return 1;
      }
    } else {
      return 1;
    }
  });
  currentTop = 0;
  wrapperOffset = 0 - INT(window.getComputedStyle($(".container-fluid")[0]).top);
  _results = [];
  for (_l = 0, _len3 = sortedCommentList.length; _l < _len3; _l++) {
    _comment = sortedCommentList[_l];
    plannedTop = _comment['commentHighlighterTop'] + wrapperOffset;
    if (currentTop > plannedTop) {
      plannedTop = currentTop;
    }
    $(_comment['commentBox']).css("top", plannedTop);
    currentTop = plannedTop + _comment['commentBoxHeight'] + 3;
    _results.push(console.log(currentTop));
  }
  return _results;
};

$(function() {
  pageInitialize();
  userInitialize();
  editInitialize();
  return formInitialize();
});

/*
//@ sourceMappingURL=CS_page.map
*/
